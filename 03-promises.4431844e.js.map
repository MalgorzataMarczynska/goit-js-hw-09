{"mappings":"AAAaA,SAASC,cAAc,SAClBD,SAASC,cAAc,UAOzC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAGpBM,EAAO,SAAS,GAEjBN,EAAM,G,CAIbF,EAAc,EAAG,MACdW,MAAK,EAACV,SAAEA,EAAUS,MAAAE,MACjBC,QAAQC,IAAI,uBAAqBb,QAAiBW,MAAU,IAE7DG,OAAM,EAACd,SAAEA,EAAUS,MAAAM,MAClBH,QAAQC,IAAI,sBAAoBb,QAAee,MAAU,IAe7D,SAA0BC,GASxB,IAAK,IAAIhB,EAAW,EAAGA,GAAYgB,EAAQhB,IAEzCD,EAAcC,EAjDN,I,CAsDZiB,CAAiB","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\nconst submitBtn = document.querySelector('button');\n// const delay = () => {\n//   delayFirst + position * step;\n// };\n// console.log(delay);\nlet delay = 2000;\nlet step = 500;\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  //savingData();\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject('Error!');\n      }\n    }, delay);\n  });\n}\n\ncreatePromise(2, 2500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n// function savingData(event) {\n//   //event.preventDefault();\n//   const {\n//     elements: { delay, step, amount },\n//   } = form;\n//   const promiseSettings = {\n//     delay: delay.value,\n//     step: step.value,\n//     amount: amount.value,\n//   };\n//   return { delay, step, amount };\n// }\n//form.addEventListener('input', savingData);\nfunction generatePromises(number) {\n  //const promiseSettings = savingData();\n  // if (\n  //   form.delayFirst.value === '' ||\n  //   form.step.value === '' ||\n  //   form.amount.value === ''\n  // ) {\n  //   return console.log('Please fill in all the fields!');\n  // }\n  for (let position = 1; position <= number; position++) {\n    // const delay = promiseSettings.delay + position * promiseSettings.step;\n    createPromise(position, delay);\n  }\n}\n//form.reset();\n\ngeneratePromises(6);\n// submitBtn.addEventListener('submit', event => {\n//   //event.preventDefault();\n//   const promiseSettings = savingData();\n//   generatePromises(6);\n// });\n"],"names":["document","querySelector","$47d4ff9957288465$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","then","delay2","console","log","catch","delay3","number","$47d4ff9957288465$var$generatePromises"],"version":3,"file":"03-promises.4431844e.js.map"}