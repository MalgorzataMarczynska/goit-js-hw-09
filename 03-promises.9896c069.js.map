{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SACXD,SAASC,cAAc,UAEhD,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,GAAIN,EAEF,OADAI,EAAQ,CAAEN,WAAUC,UACb,CAAED,WAAUC,SAEnBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAIP,SAASQ,IACP,IAAAC,EAEId,EADFe,SAAYV,EAAKS,EAALT,MAAOW,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAO3B,MALwB,CACtBZ,MAAOA,EAAMa,MACbF,KAAMA,EAAKE,MACXD,OAAQA,EAAOC,M,CAyBnBlB,EAAKmB,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBACNR,IACA,IAAMS,EAAkBT,KAvB1B,SAA0BU,GAIxB,IAHA,IAAMD,EAAkBT,IACpBW,EAAaC,OAAOH,EAAgBjB,OACpCW,EAAOS,OAAOH,EAAgBN,MACzBU,EAAI,EAAGA,GAAKH,EAAQG,IAE3BvB,EAAcuB,EADKF,EAAaE,EAAIV,GAEjCW,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBwB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGjD4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBwB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAWnD8B,CADaV,OAAOH,EAAgBL,Q","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\nconst createPromiseBtn = document.querySelector('button');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        return { position, delay };\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction savingData() {\n  const {\n    elements: { delay, step, amount },\n  } = form;\n  const promiseSettings = {\n    delay: delay.value,\n    step: step.value,\n    amount: amount.value,\n  };\n  return promiseSettings;\n}\n\nfunction generatePromises(number) {\n  const promiseSettings = savingData();\n  let firstDelay = Number(promiseSettings.delay);\n  let step = Number(promiseSettings.step);\n  for (let i = 1; i <= number; i++) {\n    const wholeDelay = firstDelay + i * step;\n    createPromise(i, wholeDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  savingData(event);\n  const promiseSettings = savingData();\n  let number = Number(promiseSettings.amount);\n  generatePromises(number);\n});\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$savingData","_elements","elements","step","amount","value","addEventListener","event","preventDefault","promiseSettings","number","firstDelay","Number","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$generatePromises"],"version":3,"file":"03-promises.9896c069.js.map"}